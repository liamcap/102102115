import random


class Player:
    def __init__(self, name, chips):
        self.name = name
        self.chips = chips
        self.free_dice_number = 5
        self.locked_dices = []
        self.dices = [0] * self.free_dice_number
        self.score = 0

    def roll_dice(self):
        for i in range(self.free_dice_number):
            self.dices[i] = random.randint(1, 6)

    def show_dices(self):
        return self.dices

    def lock_dice(self, indices):  # 将未锁定的骰子改成-1，更新手中可投掷的骰子数量
        for i in range(1, self.free_dice_number + 1):
            if i not in indices:
                self.dices[i - 1] = -1
        for i in range(self.free_dice_number):
            if self.dices[i] != -1:
                self.locked_dices.append(self.dices[i])
        self.locked_dices.sort()
        if len(indices) == 1 and indices[0] == -1:
            pass
        else:
            self.free_dice_number -= len(indices)

    def get_locked_dices(self):
        return self.locked_dices

    def reset_dices(self):
        self.dices = [0] * self.free_dice_number


def play_game(num_rounds, initial_chips):
    num_players = int(input("请输入玩家数量："))
    players = []
    for i in range(num_players):
        name = input("请输入玩家{}的名称：".format(i + 1))
        player = Player(name, initial_chips)
        players.append(player)

    total_rounds = 0
    while total_rounds < num_rounds:
        total_rounds += 1
        print("\n第{}局游戏开始！".format(total_rounds))
        for player in players:  # 每局开始初始化骰子
            player.free_dice_number = 5
            player.reset_dices()

        for i in range(2):  # 每局的前两轮投掷
            print("\n第{}轮投掷开始：".format(i + 1))
            for player in players:  # 显示投掷结果
                player.reset_dices()
                player.roll_dice()
                print("{}的骰子结果：{}".format(player.name, player.show_dices()))
            print("\n{}轮投掷结束".format(i + 1))

            for player in players:

                # print("{}自由骰子数：{}".format(player.name, player.free_dice_number))
                while True:  # 获取锁定骰子的索引
                    if player.free_dice_number == 0:
                        indices = []
                        break
                    indices = input("请输入{}要锁定的骰子索引（以空格分隔），或输入'-1'跳过锁定：".format(player.name)).split()
                    if len(indices) == 1 and indices[0].upper() == 'N':
                        break
                    try:
                        indices = [int(index) for index in indices]
                        if len(indices) > 5:
                            print("错误：最多只能锁定5个骰子")
                            continue
                        break
                    except ValueError:
                        print("错误：请输入有效的骰子索引")
                player.lock_dice(indices)
                print("{}锁定的骰子：{}".format(player.name, player.get_locked_dices()))
                print("{}自由骰子数：{}".format(player.name, player.free_dice_number))
            print('\n')

        print("\n第3轮投掷开始：")
        for player in players:
            player.reset_dices()
            player.roll_dice()
            print("{}的最终骰子结果：{}".format(player.name, player.show_dices()))
            for i in range(player.free_dice_number):
                player.locked_dices.append(player.dices[i])
            player.get_locked_dices().sort()
            print("{}的最终骰子结果：{}".format(player.name, player.get_locked_dices()))

    #     scores = {}
    #     for player in players:
    #         score = sum(player.get_locked_dices())
    #         bonus = random.randint(1, 6)
    #         score += bonus
    #         scores[player.name] = score
    #         print("{}的得分：{}（骰子点数总和：{}，奖励分：{}）".format(player.name, score, sum(player.get_locked_dices()), bonus))
    #
    #     max_score = max(scores.values())
    #     winners = [player for player, score in scores.items() if score == max_score]
    #
    #     if len(winners) == 1:
    #         winner = winners[0]
    #         print("\n{}获胜！".format(winner))
    #         for player in players:
    #             if player.name != winner:
    #                 diff = abs(scores[player.name] - scores[winner])
    #                 chips_to_lose = diff * random.randint(0, 3)
    #                 player.chips -= chips_to_lose
    #                 print("{}输给了{}筹码".format(player.name, chips_to_lose))
    #     else:
    #         print("\n平局，无人获胜！")
    #
    #     players = [player for player in players if player.chips > 0]
    #
    #     if len(players) <= 1:
    #         break
    #
    # print("\n游戏结束！")
    # if len(players) == 0:
    #     print("没有玩家剩余筹码，游戏结束。")
    # elif len(players) == 1:
    #     print("{}获胜！".format(players[0].name))
    # else:
    #     print("平局，无人获胜！")
    #


game_round = int(input("请输入游戏局数："))
chips = int(input("请输入每位玩家初始筹码："))
play_game(game_round, chips)  
